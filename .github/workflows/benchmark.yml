name: Run Benchmarks

on:
  schedule:
    - cron: '0 2 * * *'  # Every night at 2 AM UTC
  workflow_dispatch:

jobs:
  benchmark:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push to gh-pages

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to check commit history
          path: build

      - name: Check for new commits since last run
        id: commit-check
        run: |
          cd build
          echo "Checking for new commits in last 24 hours..."
          NOW=$(date -u +%s)
          YESTERDAY=$(($NOW - 86400))
          SINCE=$(date -u -d "@$YESTERDAY" --iso-8601=seconds)

          echo "Looking for commits since $SINCE"

          COMMITS=$(git log --since="$SINCE" --oneline)
          echo "$COMMITS"

          if [ -z "$COMMITS" ]; then
            echo "No new commits in last 24 hours. Skipping benchmark."
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "New commits found. Proceeding with benchmark."
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Stop if no new commits
        if: steps.commit-check.outputs.should_run == 'false' || github.event_name == 'workflow_dispatch'
        run: exit 0

      - name: Setup .NET 9.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
  
      - name: Setup .NET 10.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Restore dependencies
        run: |
          cd build
          dotnet restore

      - name: Build solution
        run: |
          cd build
          dotnet build --configuration Release

      - name: Run benchmarks
        run: |
          cd build
          dotnet run --project ./WebAssemblySharpBenchmark/WebAssemblySharpBenchmark.csproj --configuration Release

      # Checkout the gh-pages branch where you want to push the history
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Parse Benchmark Results and Update History
        run: |
          
          # Find all JSON artifact files
          ARTIFACTS=$(find ./build/BenchmarkDotNet.Artifacts/results -name "*.json")

          if [ -z "$ARTIFACTS" ]; then
            echo "No benchmark result files found"
            exit 1
          fi

          echo "Parsing benchmark results from the following files:"
          echo "$ARTIFACTS"

          # Process each artifact file
          python3 <<EOF
          import json
          import os
          import re
          from datetime import datetime

          # Initialize list to collect entries
          entry_list = []

          # Loop through each artifact file
          artifact_files = """$ARTIFACTS""".split("\n")
          for artifact in artifact_files:
              if not artifact:
                  continue
              print(f"Parsing benchmark result from: {artifact}")

              # Load benchmark output
              with open(artifact) as f:
                  data = json.load(f)

              benchmarks = data.get("Benchmarks", [])
              pattern = r"Runtime=([^,]+)"
              
              # Extract data from each benchmark
              for b in benchmarks:
                  stats = b.get("Statistics", {})
                  memory = b.get("Memory", {})
                  envInfo = b.get("Properties", {})

                  runtime = "Unkown";

                  match = re.search(pattern, b.get("DisplayInfo", "Unknown"))
                  if match:
                    runtime = match.group(1);
                  else:
                    runtime = "Unkown";

                  entry = {
                      "displayInfo": b.get("DisplayInfo", "Unknown"),
                      "commit": os.environ.get("GITHUB_SHA"),
                      "date": datetime.utcnow().isoformat(),
                      "fullName": b.get("FullName", "Unknown"),
                      "runtime": runtime,
                      "namespace": b.get("Namespace", "Unknown"),
                      "type": b.get("Type", "Unknown"),
                      "method": b.get("Method", "Unknown"),
                      "meanNs": stats.get("Mean", None),
                      "stdDevNs": stats.get("StandardDeviation", None),
                      "allocBytes": memory.get("BytesAllocatedPerOperation", None),
                      "gen0": memory.get("Gen0Collections", None),
                      "gen1": memory.get("Gen1Collections", None),
                      "gen2": memory.get("Gen2Collections", None)
                  }
                  entry_list.append(entry)

          # Load or initialize history
          history_file = "gh-pages/Pages/Benchmark/history.json"
          if os.path.exists(history_file):
              with open(history_file) as f:
                  history = json.load(f)
          else:
              history = []

          # Append new entries to the history
          history.extend(entry_list)

          # Save updated history
          with open(history_file, "w") as f:
              json.dump(history, f, indent=2)

          EOF

      # Commit and push the changes to the gh-pages branch
      - name: Commit and push to gh-pages
        run: |
          cd gh-pages
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Update benchmark history"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


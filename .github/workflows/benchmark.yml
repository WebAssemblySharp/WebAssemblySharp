name: Run Benchmarks

on:
  schedule:
    - cron: '0 2 * * *'  # Every night at 2 AM UTC
  workflow_dispatch:

jobs:
  benchmark:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push to gh-pages

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to check commit history
          path: build

      - name: Check for new commits since last run
        id: commit-check
        run: |
          cd build
          echo "Checking for new commits in last 24 hours..."
          NOW=$(date -u +%s)
          YESTERDAY=$(($NOW - 86400))
          SINCE=$(date -u -d "@$YESTERDAY" --iso-8601=seconds)

          echo "Looking for commits since $SINCE"

          COMMITS=$(git log --since="$SINCE" --oneline)
          echo "$COMMITS"

          if [ -z "$COMMITS" ]; then
            echo "No new commits in last 24 hours. Skipping benchmark."
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "New commits found. Proceeding with benchmark."
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Stop if no new commits
        if: steps.commit-check.outputs.should_run == 'false' || github.event_name == 'workflow_dispatch'
        run: exit 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x' # or your target version

      - name: Restore dependencies
        run: |
          cd build
          dotnet restore

      - name: Build solution
        run: |
          cd build
          dotnet build --configuration Release

      - name: Run benchmarks
        run: |
          cd build
          dotnet run --project ./WebAssemblySharpBenchmark/WebAssemblySharpBenchmark.csproj --configuration Release

      # Checkout the gh-pages branch where you want to push the history
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Parse Benchmark Results and Update History
        run: |
          ARTIFACT=$(find ./build/BenchmarkDotNet.Artifacts/results -name "*.json" | head -n 1)

          echo "Parsing benchmark result from: $ARTIFACT"

          python3 <<EOF
          import json
          import os
          from datetime import datetime

          # Load benchmark output
          with open("$ARTIFACT") as f:
              data = json.load(f)

          benchmarks = data.get("Benchmarks", [])

          entry_list = []
          for b in benchmarks:
              stats = b.get("Statistics", {})
              memory = b.get("Memory", {})

              entry = {
                  "commit": os.environ.get("GITHUB_SHA"),
                  "date": datetime.utcnow().isoformat(),
                  "method": b.get("FullName", "Unknown"),
                  "meanNs": stats.get("Mean", None),
                  "stdDevNs": stats.get("StandardDeviation", None),
                  "allocBytes": memory.get("AllocatedBytes", None),
                  "gen0": memory.get("Gen0Collections", None),
                  "gen1": memory.get("Gen1Collections", None),
                  "gen2": memory.get("Gen2Collections", None)
              }
              entry_list.append(entry)

          # Load or initialize history
          history_file = "gh-pages/Pages/Benchmark/history.json"
          if os.path.exists(history_file):
              with open(history_file) as f:
                  history = json.load(f)
          else:
              history = []

          history.extend(entry_list)

          # Save updated history
          with open(history_file, "w") as f:
              json.dump(history, f, indent=2)

          EOF

      # Commit and push the changes to the gh-pages branch
      - name: Commit and push to gh-pages
        run: |
          cd gh-pages
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Update benchmark history"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


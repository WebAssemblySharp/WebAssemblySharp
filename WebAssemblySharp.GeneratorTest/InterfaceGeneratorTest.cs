using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using WebAssemblySharp.InterfaceGenerator;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using WebAssemblySharp.Attributes;
using WebAssemblySharpExampleData;

namespace WebAssemblySharp.GeneratorTest;

[TestClass]
public class InterfaceGeneratorTest
{
    //[TestMethod]
    public async Task GenerateInterfaceForExternalWasm()
    {
        var inputSource = @"
            using WebAssemblySharp.Attributes;
            using WebAssemblySharpExampleData;

            namespace TestNamespace;

            [WebAssemblyModuleManifestResource(""WebAssemblySharpExampleData.Programms.add.wasm"", typeof(WebAssemblyExamples))]
            [WebAssemblyModuleDefinition(""add"")]
            public partial interface ITest
            {
            }
";

        var expectedGenerated = @"// <auto-generated/>
using System;
using System.Threading.Tasks;

namespace TestNamespace;
public partial interface ITest
{
   public ValueTask<int> add(int p_Value_0, int p_Value_1);
}
";

        var test = new CSharpSourceGeneratorTest<InterfaceSourceGenerator, MSTestVerifier>
        {
            
            TestState =
            {
                Sources = { inputSource },
                AdditionalReferences = { MetadataReference.CreateFromFile(typeof(WebAssemblyModuleManifestResource).Assembly.Location), MetadataReference.CreateFromFile(typeof(WebAssemblyExamples).Assembly.Location) },
                GeneratedSources =
                {
                    (typeof(InterfaceSourceGenerator), "TestNamespace.ITest.Generated.cs", expectedGenerated)
                }
            }
        };

        await test.RunAsync();
    }
}
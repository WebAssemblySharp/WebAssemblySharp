using System.IO;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Text;
using WebAssemblySharp.InterfaceGenerator;
using WebAssemblySharp.Attributes;
using WebAssemblySharpExampleData;

namespace WebAssemblySharp.GeneratorTest;

[TestClass]
public class InterfaceGeneratorTest
{
    [TestMethod]
    public async Task GenerateInterfaceForExternalWasm()
    {
        var inputSource = @"
            using WebAssemblySharp.Attributes;
            using WebAssemblySharpExampleData;

            namespace TestNamespace;

            [WebAssemblyModuleManifestResource(""WebAssemblySharpExampleData.Programms.add.wasm"", typeof(WebAssemblyExamples))]
            [WebAssemblyModuleDefinition(""add"")]
            public partial interface ITest
            {
            }
";

        var l_ExpectedGenerated = @"// <auto-generated/>
using System;
using System.Threading.Tasks;

namespace TestNamespace;
public partial interface ITest
{
   public ValueTask<int> add(int p_Value_0, int p_Value_1);
}
";

        var l_Test = new CSharpSourceGeneratorTest<InterfaceSourceGenerator, DefaultVerifier>
        {
            
            TestState =
            {
                Sources = { inputSource },
                AdditionalReferences = { MetadataReference.CreateFromFile(typeof(WebAssemblyModuleManifestResource).Assembly.Location), MetadataReference.CreateFromFile(typeof(WebAssemblyExamples).Assembly.Location) },
                GeneratedSources =
                {
                    (typeof(InterfaceSourceGenerator), "TestNamespace.ITest.generated.cs", l_ExpectedGenerated)
                }
            }
        };

        await l_Test.RunAsync();
    }
    
    
    [TestMethod]
    public async Task GenerateInterfaceForSameProjectWasm()
    {
        var inputSource = @"
            using WebAssemblySharp.Attributes;

            namespace TestNamespace;

            [WebAssemblyModuleManifestResource(""TestProject.Programms.add.wasm"")]
            [WebAssemblyModuleDefinition(""add"")]
            public partial interface ITest
            {
            }
";

        var l_ExpectedGenerated = @"// <auto-generated/>
using System;
using System.Threading.Tasks;

namespace TestNamespace;
public partial interface ITest
{
   public ValueTask<int> add(int p_Value_0, int p_Value_1);
}
";

        Stream l_Stream = GetType().Assembly.GetManifestResourceStream("WebAssemblySharp.GeneratorTest.add.wasm");
        TextReader l_Reader = new StreamReader(l_Stream);
        string l_WasmContent = l_Reader.ReadToEnd();
        

        var l_Test = new CSharpSourceGeneratorTest<InterfaceSourceGenerator, DefaultVerifier>
        {
            
            TestState =
            {
                Sources = { inputSource },
                AdditionalReferences = { MetadataReference.CreateFromFile(typeof(WebAssemblyModuleManifestResource).Assembly.Location) },
                GeneratedSources =
                {
                    (typeof(InterfaceSourceGenerator), "TestNamespace.ITest.generated.cs", l_ExpectedGenerated)
                },
                AdditionalFiles = { 
                    (typeof(InterfaceSourceGenerator), "TestProject.Programms.add.wasm", SourceText.From(l_WasmContent)),
                }  
            }
        };

        await l_Test.RunAsync();
    }
    
}